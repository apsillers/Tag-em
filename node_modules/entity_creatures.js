module.exports = function(utilities, changeListener, entities, activeEntities, entitiesByLocation, mapData, construct) {

    var creatures = {};

    creatures.GridBug = function(options) {
        this.id = options.id;
        this.symbol = 'x';
        this.hasBrain = true;
        this.color = options.color || "#F0F";
        this.blocking = true;
        if(options.interval) {
            this.timeToNext = options.interval;
            this.intervalTime = options.interval;
        }
        this.onCollide = function(entity) {
            /*if(!entity) return;

            if(entity.blocking) {
                var level = this.z;
                this.remove();

                entity.frozen = true;
                setTimeout(function() { entity.frozen = false; }, 2000);
                changeListener.emit("change", [level], ['pos']);
            }*/
        }

        this.health = 4;
        this.setHealth = function() {
	    this.setHealth = function(healthDelta) {
            this.health += healthDelta;
            if(this.health <= 0) {
	            this.remove();
	            changeListener.emit("change", [this.z], ["pos"]);
            }
        };
        }

        this.act = function() {
            var filteredEntities = utilities.filterEntities(this.id, entities);

            var playersInRange = [];

            for(var i in filteredEntities) {
                if(filteredEntities[i] instanceof construct.Player) {
                    playersInRange.push(filteredEntities[i]);
                }
            }

            playersInRange.sort(function(a,b) {
                function distance(foo, bar) { return Math.sqrt((foo.x-bar.x)*(foo.x-bar.x) + (foo.y-bar.y)*(foo.y-bar.y)); }
                return (a.health - b.health) ||
                    distance(this,a) - distance(this,b);
            });

            if(playersInRange.length > 0) {
                var dx = -Math.abs(this.x - playersInRange[0].x) / (this.x - playersInRange[0].x || 1);
                var dy = -Math.abs(this.y - playersInRange[0].y) / (this.y - playersInRange[0].y || 1);
                var vector = {
                    x: dx,
                    y: dy
                }
                
                var stepResult = this.step(vector);
                if(stepResult) return;

                if(Math.random() > 0.5) {
                    this.step({ x: 0, y: dy });
                    stepResult = this.step(vector);
                    if(!stepResult) this.step({ x: dx, y: 0 });
                } else {
                    this.step({ x: dx, y: 0 });
                    stepResult = this.step(vector);
                    if(!stepResult) this.step({ x: 0, y: dy });
                }
            }
        };

        this.place(options.z, options.x, options.y, true);
    }
    creatures.GridBug.prototype = construct.entityProto;

    return creatures;

};
